name: HUFS CS RAG Bot CI/CD

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  # CI: 코드 검사 및 Docker 이미지 빌드 및 푸시
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run flake8 critical checks (fail on syntax errors)
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run full flake8 style checks (log only)
        run: |
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: hyunbinkim00/hufs-cs-ragbot-api:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

  # CD: EC2 서버에 배포
  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            docker pull hyunbinkim00/hufs-cs-ragbot-api:latest

            docker ps -q --filter "publish=8000" | xargs -r docker stop
            docker stop hufs-cs-ragbot || true
            docker rm hufs-cs-ragbot || true

            mkdir -p /app/data /app/study_docs

            # 컨테이너 재실행
            docker run -d \
              --name hufs-cs-ragbot \
              -p 8000:8000 \
              -e OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
              --restart unless-stopped \
              hyunbinkim00/hufs-cs-ragbot-api:latest

            # 미사용 이미지 정리
            docker system prune -af --volumes
